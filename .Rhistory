data[data[, id] == i, factors_ind]
# create the model
modelname <- personmodelnames[i]  |> as.character()
personmodel_list[[i]] <- OpenMx::mxModel(name = modelname,
A, B, C, D,
Q, R, x0, P0,
u,
OpenMx::mxExpectationStateSpace('A', 'B', 'C', 'D',
'Q', 'R', 'x0', 'P0',
'u'),
OpenMx::mxFitFunctionML(),
OpenMx::mxData(data[data[, id] == i, factors_ind],
'raw'))
data[data[, id] == i, ]
personmodel_list[[i]] <- OpenMx::mxModel(name = modelname,
A, B, C, D,
Q, R, x0, P0,
u,
OpenMx::mxExpectationStateSpace('A', 'B', 'C', 'D',
'Q', 'R', 'x0', 'P0',
'u'),
OpenMx::mxFitFunctionML(),
OpenMx::mxData(data[data[, id] == i,],
'raw'))
library(devtools)
load_all()
# MM <- "f1 =~ v1 + v2 + v3 + v4
#            f2 =~ v5 + v6 + v7 + v8"
#
# output_step1 <- step1(exampledata, measurementmodel = MM)
#
# step2output <- step2(output_step1)
#
# id = "id"
#
# A <- create_A(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
# Q <- create_Q(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
#
# test <- step3(step2output, id = "id", A = A, Q = Q)
# summary(test$model)
#
cond <- expand.grid(MMdef = c("list", "nolist"),
step1def = c("group", "nogroup"),
randomintercept = c(TRUE, FALSE),
step3def = c("group", "nogroup"))
pos = 1
MMdef <- cond$MMdef[pos] |> as.character()
step1def <- cond$step1def[pos] |> as.character()
randomintercept <- cond$randomintercept[pos] |> as.logical()
step3def <- cond$step3def[pos] |> as.character()
MM <- "f1 =~ v1 + v2 + v3 + v4"
if(step1def == "nogroup"){
step1output <- step1(exampledata, MM)
} else {
step1output <- step1(exampledata, MM, group = "group",
invariances = c("loadings", "intercepts"))
}
step2output <- step2(step1output)
A <- create_A(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
Q <- create_Q(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
if(step3def == "group"){
step3output <- step3(step2output, id = "id", A = A, Q = Q, step3group = "group")
} else {
step3output <- step3(step2output, id = "id", A = A, Q = Q)
}
step3
use_r("step3.r")
use_r("step3.R")
library(devtools)
load_all()
# MM <- "f1 =~ v1 + v2 + v3 + v4
#            f2 =~ v5 + v6 + v7 + v8"
#
# output_step1 <- step1(exampledata, measurementmodel = MM)
#
# step2output <- step2(output_step1)
#
# id = "id"
#
# A <- create_A(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
# Q <- create_Q(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
#
# test <- step3(step2output, id = "id", A = A, Q = Q)
# summary(test$model)
#
cond <- expand.grid(MMdef = c("list", "nolist"),
step1def = c("group", "nogroup"),
randomintercept = c(TRUE, FALSE),
step3def = c("group", "nogroup"))
pos=1
MMdef <- cond$MMdef[pos] |> as.character()
step1def <- cond$step1def[pos] |> as.character()
randomintercept <- cond$randomintercept[pos] |> as.logical()
step3def <- cond$step3def[pos] |> as.character()
MM <- "f1 =~ v1 + v2 + v3 + v4"
if(step1def == "nogroup"){
step1output <- step1(exampledata, MM)
} else {
step1output <- step1(exampledata, MM, group = "group",
invariances = c("loadings", "intercepts"))
}
step2output <- step2(step1output)
A <- create_A(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
Q <- create_Q(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
if(step3def == "group"){
step3output <- step3(step2output, id = "id", A = A, Q = Q, step3group = "group")
} else {
step3output <- step3(step2output, id = "id", A = A, Q = Q)
}
library(devtools)
load_all()
# MM <- "f1 =~ v1 + v2 + v3 + v4
#            f2 =~ v5 + v6 + v7 + v8"
#
# output_step1 <- step1(exampledata, measurementmodel = MM)
#
# step2output <- step2(output_step1)
#
# id = "id"
#
# A <- create_A(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
# Q <- create_Q(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
#
# test <- step3(step2output, id = "id", A = A, Q = Q)
# summary(test$model)
#
cond <- expand.grid(step1def = c("group", "nogroup"),
randomintercept = c(TRUE, FALSE),
step3def = c("group", "nogroup"))
do_test <- function(pos, cond){
MMdef <- cond$MMdef[pos] |> as.character()
step1def <- cond$step1def[pos] |> as.character()
randomintercept <- cond$randomintercept[pos] |> as.logical()
step3def <- cond$step3def[pos] |> as.character()
MM <- "f1 =~ v1 + v2 + v3 + v4"
if(step1def == "nogroup"){
step1output <- step1(exampledata, MM)
} else {
step1output <- step1(exampledata, MM, group = "group",
invariances = c("loadings", "intercepts"))
}
step2output <- step2(step1output)
A <- create_A(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
Q <- create_Q(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
if(step3def == "group"){
step3output <- step3(step2output, id = "id", A = A, Q = Q, step3group = "group")
} else {
step3output <- step3(step2output, id = "id", A = A, Q = Q)
}
print(paste0("Row ", pos, " finished."))
}
test <- lapply(1:nrow(cond), do_test, cond = cond)
library(devtools)
load_all()
# MM <- "f1 =~ v1 + v2 + v3 + v4
#            f2 =~ v5 + v6 + v7 + v8"
#
# output_step1 <- step1(exampledata, measurementmodel = MM)
#
# step2output <- step2(output_step1)
#
# id = "id"
#
# A <- create_A(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
# Q <- create_Q(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
#
# test <- step3(step2output, id = "id", A = A, Q = Q)
# summary(test$model)
#
cond <- expand.grid(MMdef = c("list", "nolist"),
step1def = c("group", "nogroup"),
randomintercept = c(TRUE, FALSE),
step3def = c("group", "nogroup"))
do_test <- function(pos, cond){
MMdef <- cond$MMdef[pos] |> as.character()
step1def <- cond$step1def[pos] |> as.character()
randomintercept <- cond$randomintercept[pos] |> as.logical()
step3def <- cond$step3def[pos] |> as.character()
if(MMdef == "list"){
MM <- list("f1 =~ v1 + v2 + v3 + v4",
"f2 =~ v5 + v6 + v7 + v8")
} else {
MM <- "f1 =~ v1 + v2 + v3 + v4
f2 =~ v5 + v6 + v7 + v8"
}
if(step1def == "nogroup"){
step1output <- step1(exampledata, MM)
} else {
step1output <- step1(exampledata, MM, group = "group",
invariances = c("loadings", "intercepts"))
}
step2output <- step2(step1output)
A <- create_A(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 2, ncol = 2))
Q <- create_Q(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 2, ncol = 2))
if(step3def == "group"){
step3output <- step3(step2output, id = "id", A = A, Q = Q, step3group = "group")
} else {
step3output <- step3(step2output, id = "id", A = A, Q = Q)
}
print(paste0("Row ", pos, " finished."))
}
test <- lapply(1:nrow(cond), do_test, cond = cond)
library(devtools)
person("Manuel T.", "Rein", mail = "m.t.rein@tilburguniversity.edu", role = c( "aut", "cre"))
?person
person("Manuel T.", "Rein", email = "m.t.rein@tilburguniversity.edu", role = c( "aut", "cre"))
library(devtools)
use_r("step1.R")
?lavaan::cfa
.libPaths()
document()
document()
document()
?ezLVAR
load_all()
?ezLVAR
?step1
?cfa
?dplyr::filter
use_r("step2.R")
use_r("step3.R")
use_r("step1.R")
use_r("step1.R")
use_r("step2.R")
use_r("step2.R")
use_r("step2.R")
library(devtools)
load_all()
MM <- "f1 =~ v1 + v2 + v3 + v4
f2 =~ v5 + v6 + v7 + v8"
output_step1 <- step1(exampledata, measurementmodel = MM)
step2output <- step2(output_step1)
id = "id"
A <- create_A(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 2, ncol = 2))
Q <- create_Q(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 2, ncol = 2))
test <- step3(step2output, id = "id", A = A, Q = Q)
library(devtools)
load_all()
document()
library(devtools)
load_all()
MM <- "f1 =~ v1 + v2 + v3 + v4
f2 =~ v5 + v6 + v7 + v8"
output_step1 <- step1(exampledata, measurementmodel = MM)
step2output <- step2(output_step1)
id = "id"
A <- create_A(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 2, ncol = 2))
Q <- create_Q(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 2, ncol = 2))
test <- step3(step2output, id = "id", A = A, Q = Q)
use_r("step3.R")
use_r("step1.R")
use_r("create_A.R")
use_r("create_Q.R")
matrix(.5, nrow = 2, ncol = 2) |> is.numeric()
is.logical(TRUE)
is.logical(FALSE)
is.logical(.5)
others <- matrix(NA, nrow = n_factors, ncol = n_factors)
n_factors <- 2
others <- matrix(NA, nrow = n_factors, ncol = n_factors)
is.na(others)
library(devtools)
use_r("create_A.R")
use_r("create_Q.R")
use_r("step1.R")
use_r("step2.R")
use_r("step3.R")
library(OpenMx)
library(devtools)
load_all()
document()
use_r("P0.R")
library(devtools)
load_all()
document()
use_r("create_A.R")
use_r("create_Q.R")
use_r("step3.R")
library(devtools)
load_all()
document()
?tep3
?step3
library(devtools)
load_all()
document()
MM <- "f1 =~ v1 + v2 + v3 + v4
f2 =~ v5 + v6 + v7 + v8"
output_step1 <- step1(exampledata, measurementmodel = MM)
step2output <- step2(output_step1)
id = "id"
A <- create_A(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 2, ncol = 2))
Q <- create_Q(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 2, ncol = 2))
library(devtools)
load_all()
document()
MM <- "f1 =~ v1 + v2 + v3 + v4
f2 =~ v5 + v6 + v7 + v8"
output_step1 <- step1(exampledata, measurementmodel = MM)
step2output <- step2(output_step1)
id = "id"
A <- create_A(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 1, ncol = 1))
Q <- create_Q(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 1, ncol = 1))
use_r("create_A.R")
random_intercept = FALSE
startvalues = matrix(.2, nrow = 1, ncol = 1)
startvalues
step2output
MM <- "f1 =~ v1 + v2 + v3 + v4"
output_step1 <- step1(exampledata, measurementmodel = MM)
step2output <- step2(output_step1)
id = "id"
A <- create_A(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 1, ncol = 1))
Q <- create_Q(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 1, ncol = 1))
step2output
startvalues
free = NULL
labels = NULL
lbound = NULL
ubound = NULL
# Checks:
if(!is.null(free)){
if(dim(startvalues) != dim(free)){
stop("The free matrix must have the same dimensions as the startvalues matrix.")
}
}
if(!is.null(labels)){
if(dim(startvalues) != dim(labels)){
stop("The labels matrix must have the same dimensions as the startvalues matrix.")
}
}
if(!is.null(lbound)){
if(dim(startvalues) != dim(lbound)){
stop("The lbound matrix must have the same dimensions as the startvalues matrix.")
}
}
if(!is.null(ubound)){
if(dim(startvalues) != dim(ubound)){
stop("The ubound matrix must have the same dimensions as the startvalues matrix.")
}
}
if(!is.logical(random_intercept)){
stop("The random_intercept argument must be TRUE or FALSE.")
}
# extract information on factors:
factors <- step2output$other$factors
n_factors <- length(factors)
#### If there is no random intercept:
if(!random_intercept){
# create matrix that indicates free parameters
if(is.null(free)){
free <- matrix(TRUE, nrow = n_factors, ncol = n_factors)
}
# create label matrix
if(is.null(labels)){
labels <- outer(factors, factors,
FUN = function(i, j) paste0("phi_", i, "_", j))
}
# create lbound and ubound objects if not specified by user
if(is.null(lbound)){
lbound <- NA
}
if(is.null(ubound)){
ubound <- NA
}
# create OpenMx model object
A <- OpenMx::mxMatrix(type = "Full", name = "A",
nrow = n_factors, ncol = n_factors,
free = free,
values = startvalues,
labels = labels,
lbound = lbound,
ubound = ubound,
byrow = TRUE)
}
#### If there is a random intercept:
if(random_intercept){
# create matrix that indicates free parameters
if(is.null(free)){
free <- matrix(TRUE, nrow = n_factors, ncol = n_factors)
}
# expand free matrix with random intercept specification
others <- matrix(FALSE, nrow = n_factors, ncol = n_factors)
free <- rbind(cbind(free, others),
cbind(others, others))
# create label matrix
if(is.null(labels)){
labels <- outer(factors, factors,
FUN = function(i, j) paste0("phi_", i, "_", j))
}
# expand label matrix with random intercept specification
others <- matrix(NA, nrow = n_factors, ncol = n_factors)
labels <- rbind(cbind(labels, others),
cbind(others, others))
# expand lbound and ubound matrices with random intercept specification
others <- matrix(NA, nrow = n_factors, ncol = n_factors)
if(is.null(lbound)){
lbound <- NA
} else {
lbound <- rbind(cbind(lbound, others),
cbind(others, others))
}
if(is.null(ubound)){
ubound <- NA
} else {
ubound <- rbind(cbind(ubound, others),
cbind(others, others))
}
# expand startvalue matrix with random intercept specification
startvalues <- rbind(cbind(startvalues, matrix(0, nrow = n_factors, ncol = n_factors)),
cbind(matrix(0, nrow = n_factors, ncol = n_factors), diag(n_factors)))
# create OpenMx model object
A <- OpenMx::mxMatrix(type = "Full", name = "A",
nrow = 2*n_factors, ncol = 2*n_factors,
free = free,
values = startvalues,
labels = labels,
lbound = lbound,
ubound = ubound,
byrow = TRUE)
}
A
use_r("create_Q.R")
random_intercept
free = NULL
library(devtools)
load_all()
document()
MM <- "f1 =~ v1 + v2 + v3 + v4"
output_step1 <- step1(exampledata, measurementmodel = MM)
step2output <- step2(output_step1)
id = "id"
A <- create_A(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 1, ncol = 1))
Q <- create_Q(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 1, ncol = 1))
test <- step3(step2output, id = "id", A = A, Q = Q)
summary(test$model)
library(devtools)
load_all()
MM <- "f1 =~ v1 + v2 + v3 + v4
f2 =~ v5 + v6 + v7 + v8"
output_step1 <- step1(exampledata, measurementmodel = MM)
step2output <- step2(output_step1)
id = "id"
A <- create_A(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 2, ncol = 2))
Q <- create_Q(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 2, ncol = 2))
test <- step3(step2output, id = "id", A = A, Q = Q)
summary(test$model)
library(devtools)
load_all()
?step1.R
?step1
use_r("step1.R")
use_r("step3.R")
document()
?step1
?step3
?create_A
use_r("step2.R")
use_r("step1.R")
load_all()
document()
load_all()
?step1
use_r("step3.R")
?create_A
use_r("create_A.r")
use_r("create_A.R")
use_r("create_Q.R")
document()
library(devtools)
load_all()
MM <- "f1 =~ v1 + v2 + v3 + v4
f2 =~ v5 + v6 + v7 + v8"
output_step1 <- step1(exampledata, measurementmodel = MM)
step2output <- step2(output_step1)
id = "id"
A <- create_A(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 2, ncol = 2))
Q <- create_Q(step2output, random_intercept = FALSE,
startvalues = matrix(.2, nrow = 2, ncol = 2))
test <- step3(step2output, id = "id", A = A, Q = Q)
summary(test$model)
