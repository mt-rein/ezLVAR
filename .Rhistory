#
# test <- step3(step2output, id = "id", A = A, Q = Q)
# summary(test$model)
#
cond <- expand.grid(MMdef = c("list", "nolist"),
step1def = c("group", "nogroup"),
randomintercept = c(TRUE, FALSE),
step3def = c("group", "nogroup"))
library(devtools)
load_all()
# MM <- "f1 =~ v1 + v2 + v3 + v4
#            f2 =~ v5 + v6 + v7 + v8"
#
# output_step1 <- step1(exampledata, measurementmodel = MM)
#
# step2output <- step2(output_step1)
#
# id = "id"
#
# A <- create_A(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
# Q <- create_Q(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
#
# test <- step3(step2output, id = "id", A = A, Q = Q)
# summary(test$model)
#
cond <- expand.grid(MMdef = c("list", "nolist"),
step1def = c("group", "nogroup"),
randomintercept = c(TRUE, FALSE),
step3def = c("group", "nogroup"))
MMdef <- cond$MMdef[pos] |> as.character()
step1def <- cond$step1def[pos] |> as.character()
randomintercept <- cond$randomintercept[pos] |> as.logical()
pos=1
MMdef <- cond$MMdef[pos] |> as.character()
step1def <- cond$step1def[pos] |> as.character()
randomintercept <- cond$randomintercept[pos] |> as.logical()
step3def <- cond$step3def[pos] |> as.character()
MM <- "f1 =~ v1 + v2 + v3 + v4"
if(step1def == "nogroup"){
step1output <- step1(exampledata, MM)
} else {
step1output <- step1(exampledata, MM, group = "group",
invariances = c("loadings", "intercepts"))
}
step2output <- step2(step1output)
A <- create_A(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 2, ncol = 2))
Q <- create_Q(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 2, ncol = 2))
if(step1def == "nogroup"){
step1output <- step1(exampledata, MM)
} else {
step1output <- step1(exampledata, MM, group = "group",
invariances = c("loadings", "intercepts"))
}
step2output <- step2(step1output)
A <- create_A(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
Q <- create_Q(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
MM <- "f1 =~ v1 + v2 + v3 + v4"
if(step1def == "nogroup"){
step1output <- step1(exampledata, MM)
} else {
step1output <- step1(exampledata, MM, group = "group",
invariances = c("loadings", "intercepts"))
}
step2output <- step2(step1output)
A <- create_A(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
Q <- create_Q(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
B = NULL
D = NULL
P0 = NULL
x0 = NULL
u = NULL
step3group = NULL
#### 1) Preparations ####
## extract objects from step 1 output:
data <- step2output$data |> as.data.frame()
lambda_star <- step2output$lambda_star
theta_star <- step2output$theta_star
factors <- step2output$other$factors
factors_ind <- paste0(factors, "_ind")                                        # names of factor score variables (single indicators)
n_factors <- length(factors)
step1group <- step2output$other$step1group                                    # name of the grouping variable in step1
unique_ids <- unique(data[, id])                                              # vector of unique ids
N <- length(unique_ids)
#### 1) Preparations ####
## extract objects from step 1 output:
data <- step2output$data |> as.data.frame()
lambda_star <- step2output$lambda_star
MMdef <- cond$MMdef[pos] |> as.character()
step1def <- cond$step1def[pos] |> as.character()
randomintercept <- cond$randomintercept[pos] |> as.logical()
step3def <- cond$step3def[pos] |> as.character()
MM <- "f1 =~ v1 + v2 + v3 + v4"
if(step1def == "nogroup"){
step1output <- step1(exampledata, MM)
} else {
step1output <- step1(exampledata, MM, group = "group",
invariances = c("loadings", "intercepts"))
}
step2output <- step2(step1output)
A <- create_A(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
Q <- create_Q(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
step2output
#### 1) Preparations ####
## extract objects from step 1 output:
data <- step2output$data |> as.data.frame()
lambda_star <- step2output$lambda_star
theta_star <- step2output$theta_star
factors <- step2output$other$factors
factors_ind <- paste0(factors, "_ind")                                        # names of factor score variables (single indicators)
n_factors <- length(factors)
step1group <- step2output$other$step1group                                    # name of the grouping variable in step1
unique_ids <- unique(data[, id])                                              # vector of unique ids
id
id="id"
unique_ids <- unique(data[, id])                                              # vector of unique ids
N <- length(unique_ids)
#### 2) data manipulation ####
## rename the factor score variables in the data
# to use them as indicators of the latent variables
data <- data |>
dplyr::rename_with(~ factors_ind, all_of(factors))
#### 3) create OpenMx matrices ####
xdim <- nrow(A$free)                                                          # number of latent variables (depends whether there is a random intercept or not)
udim <- 1                                                                     # exogenous covariates (ignored so far)
ydim <- n_factors                                                             # number of indicators (i.e., factor score variables)
# B matrix (= exogenous covariates on latent constructs)
if(is.null(B)){
B <- OpenMx::mxMatrix("Zero", name = "B",
nrow = xdim, ncol = udim)
}
# D matrix (= exogenous covariates on observed variables)
if(is.null(D)){
D <- OpenMx::mxMatrix("Zero", name = "D",
nrow = ydim, ncol = udim)
}
# x0 and P0 (= initial values and (co)variances of the latent constructs)
if(is.null(x0)){
if(xdim > ydim){
labels = c(paste0("ini_", factors),
paste0("m_intercept_", factors))
} else {
labels = paste0("ini_", factors)
}
x0 <- OpenMx::mxMatrix("Full", name = "x0",
nrow = xdim, ncol = 1,
free = FALSE,
values = 0,
labels = labels)
}
if(is.null(P0)){
# create matrix that indiciates free parameters
free <- matrix(TRUE, nrow = n_factors, ncol = n_factors)
# create label matrix
labels <- matrix(NA, n_factors, n_factors)
# Fill the matrix with symmetric labels
for (i in 1:n_factors) {
for (j in 1:n_factors) {
labels[i, j] <- paste0("P0_", factors[min(i, j)], "_", factors[max(i, j)])
}
}
# create startvalues
startvalues <- matrix(10, nrow = n_factors, ncol = n_factors)
diag(startvalues) <- 100
# if random intercept is included, expand these matrices
if(xdim > ydim){
others <- matrix(FALSE, nrow = n_factors, ncol = n_factors)
free <- rbind(cbind(free, others),
cbind(others, free))
others <- matrix(NA, nrow = n_factors, ncol = n_factors)
intercepts <- matrix(NA, n_factors, n_factors)
for (i in 1:n_factors) {
for (j in 1:n_factors) {
intercepts[i, j] <- paste0("P0_icp_", factors[min(i, j)], "_", factors[max(i, j)])
}
}
labels <- rbind(cbind(labels, others),
cbind(others, intercepts))
others <- matrix(0, nrow = n_factors, ncol = n_factors)
startvalues <- rbind(cbind(startvalues, others),
cbind(others, startvalues))
}
P0 <- OpenMx::mxMatrix(type = "Full", name = "P0",
nrow = xdim, ncol = xdim,
free = free,
values = startvalues,
labels = labels,
byrow = TRUE)
}
# u (= covariates)
if(is.null(u)){
u <- OpenMx::mxMatrix("Zero", name = "u", nrow = udim, ncol = 1)
}
# create a list of models (one for each individual) for each latent class:
personmodelnames <- paste0("id_", unique_ids)
names(personmodelnames) <- unique_ids
personmodel_list <- vector(mode = "list", length = N)
for(i in unique_ids){
# which step1 group (if any) does the individual belong to?
if(!purrr::is_empty(step1group)){
s1g <- data[data[, id] == i, step1group] |> unique()
} else {
s1g <- 1
}
# fix the loadings to lambda_star (potentially depending on step1 group)
# C matrix
values <- matrix(0, nrow = n_factors, ncol = n_factors)
diag(values) <- lambda_star[s1g, ]
C_names <- list(factors_ind, factors)
if(xdim > ydim){
values = cbind(values, values)
C_names <- list(factors_ind, c(paste0(factors),
paste0("intercept_", factors)))
}
C <- OpenMx::mxMatrix("Full", name = "C",
nrow = ydim, ncol = xdim,
free = FALSE,
values = values,
labels = NA,
byrow = TRUE,
dimnames = C_names
)
# fix the residual variances to theta_star (potentially depending on step 1 group)
# R matrix (= measurement noise)
R <- OpenMx::mxMatrix("Diag", name = "R",
nrow = ydim, ncol = ydim,
free = FALSE,
values = theta_star[s1g, ],
labels = NA
)
# create the model
modelname <- personmodelnames[i]  |> as.character()
personmodel_list[[i]] <- OpenMx::mxModel(name = modelname,
A, B, C, D,
Q, R, x0, P0,
u,
OpenMx::mxExpectationStateSpace('A', 'B', 'C', 'D',
'Q', 'R', 'x0', 'P0',
'u'),
OpenMx::mxFitFunctionML(),
OpenMx::mxData(as.data.frame(data[data[, id] == i, factors_ind]),
'raw'))
}
# create a list of models (one for each individual) for each latent class:
personmodelnames <- paste0("id_", unique_ids)
names(personmodelnames) <- unique_ids
personmodel_list <- vector(mode = "list", length = N)
i=1
# which step1 group (if any) does the individual belong to?
if(!purrr::is_empty(step1group)){
s1g <- data[data[, id] == i, step1group] |> unique()
} else {
s1g <- 1
}
# fix the loadings to lambda_star (potentially depending on step1 group)
# C matrix
values <- matrix(0, nrow = n_factors, ncol = n_factors)
diag(values) <- lambda_star[s1g, ]
C_names <- list(factors_ind, factors)
if(xdim > ydim){
values = cbind(values, values)
C_names <- list(factors_ind, c(paste0(factors),
paste0("intercept_", factors)))
}
C <- OpenMx::mxMatrix("Full", name = "C",
nrow = ydim, ncol = xdim,
free = FALSE,
values = values,
labels = NA,
byrow = TRUE,
dimnames = C_names
)
# fix the residual variances to theta_star (potentially depending on step 1 group)
# R matrix (= measurement noise)
R <- OpenMx::mxMatrix("Diag", name = "R",
nrow = ydim, ncol = ydim,
free = FALSE,
values = theta_star[s1g, ],
labels = NA
)
# create the model
modelname <- personmodelnames[i]  |> as.character()
as.data.frame(data[data[, id] == i, factors_ind])
data[data[, id] == i, factors_ind]
data.frame(data[data[, id] == i, factors_ind])
data[data[, id] == i, factors_ind]
# create the model
modelname <- personmodelnames[i]  |> as.character()
personmodel_list[[i]] <- OpenMx::mxModel(name = modelname,
A, B, C, D,
Q, R, x0, P0,
u,
OpenMx::mxExpectationStateSpace('A', 'B', 'C', 'D',
'Q', 'R', 'x0', 'P0',
'u'),
OpenMx::mxFitFunctionML(),
OpenMx::mxData(data[data[, id] == i, factors_ind],
'raw'))
data[data[, id] == i, ]
personmodel_list[[i]] <- OpenMx::mxModel(name = modelname,
A, B, C, D,
Q, R, x0, P0,
u,
OpenMx::mxExpectationStateSpace('A', 'B', 'C', 'D',
'Q', 'R', 'x0', 'P0',
'u'),
OpenMx::mxFitFunctionML(),
OpenMx::mxData(data[data[, id] == i,],
'raw'))
library(devtools)
load_all()
# MM <- "f1 =~ v1 + v2 + v3 + v4
#            f2 =~ v5 + v6 + v7 + v8"
#
# output_step1 <- step1(exampledata, measurementmodel = MM)
#
# step2output <- step2(output_step1)
#
# id = "id"
#
# A <- create_A(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
# Q <- create_Q(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
#
# test <- step3(step2output, id = "id", A = A, Q = Q)
# summary(test$model)
#
cond <- expand.grid(MMdef = c("list", "nolist"),
step1def = c("group", "nogroup"),
randomintercept = c(TRUE, FALSE),
step3def = c("group", "nogroup"))
pos = 1
MMdef <- cond$MMdef[pos] |> as.character()
step1def <- cond$step1def[pos] |> as.character()
randomintercept <- cond$randomintercept[pos] |> as.logical()
step3def <- cond$step3def[pos] |> as.character()
MM <- "f1 =~ v1 + v2 + v3 + v4"
if(step1def == "nogroup"){
step1output <- step1(exampledata, MM)
} else {
step1output <- step1(exampledata, MM, group = "group",
invariances = c("loadings", "intercepts"))
}
step2output <- step2(step1output)
A <- create_A(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
Q <- create_Q(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
if(step3def == "group"){
step3output <- step3(step2output, id = "id", A = A, Q = Q, step3group = "group")
} else {
step3output <- step3(step2output, id = "id", A = A, Q = Q)
}
step3
use_r("step3.r")
use_r("step3.R")
library(devtools)
load_all()
# MM <- "f1 =~ v1 + v2 + v3 + v4
#            f2 =~ v5 + v6 + v7 + v8"
#
# output_step1 <- step1(exampledata, measurementmodel = MM)
#
# step2output <- step2(output_step1)
#
# id = "id"
#
# A <- create_A(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
# Q <- create_Q(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
#
# test <- step3(step2output, id = "id", A = A, Q = Q)
# summary(test$model)
#
cond <- expand.grid(MMdef = c("list", "nolist"),
step1def = c("group", "nogroup"),
randomintercept = c(TRUE, FALSE),
step3def = c("group", "nogroup"))
pos=1
MMdef <- cond$MMdef[pos] |> as.character()
step1def <- cond$step1def[pos] |> as.character()
randomintercept <- cond$randomintercept[pos] |> as.logical()
step3def <- cond$step3def[pos] |> as.character()
MM <- "f1 =~ v1 + v2 + v3 + v4"
if(step1def == "nogroup"){
step1output <- step1(exampledata, MM)
} else {
step1output <- step1(exampledata, MM, group = "group",
invariances = c("loadings", "intercepts"))
}
step2output <- step2(step1output)
A <- create_A(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
Q <- create_Q(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
if(step3def == "group"){
step3output <- step3(step2output, id = "id", A = A, Q = Q, step3group = "group")
} else {
step3output <- step3(step2output, id = "id", A = A, Q = Q)
}
library(devtools)
load_all()
# MM <- "f1 =~ v1 + v2 + v3 + v4
#            f2 =~ v5 + v6 + v7 + v8"
#
# output_step1 <- step1(exampledata, measurementmodel = MM)
#
# step2output <- step2(output_step1)
#
# id = "id"
#
# A <- create_A(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
# Q <- create_Q(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
#
# test <- step3(step2output, id = "id", A = A, Q = Q)
# summary(test$model)
#
cond <- expand.grid(step1def = c("group", "nogroup"),
randomintercept = c(TRUE, FALSE),
step3def = c("group", "nogroup"))
do_test <- function(pos, cond){
MMdef <- cond$MMdef[pos] |> as.character()
step1def <- cond$step1def[pos] |> as.character()
randomintercept <- cond$randomintercept[pos] |> as.logical()
step3def <- cond$step3def[pos] |> as.character()
MM <- "f1 =~ v1 + v2 + v3 + v4"
if(step1def == "nogroup"){
step1output <- step1(exampledata, MM)
} else {
step1output <- step1(exampledata, MM, group = "group",
invariances = c("loadings", "intercepts"))
}
step2output <- step2(step1output)
A <- create_A(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
Q <- create_Q(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 1, ncol = 1))
if(step3def == "group"){
step3output <- step3(step2output, id = "id", A = A, Q = Q, step3group = "group")
} else {
step3output <- step3(step2output, id = "id", A = A, Q = Q)
}
print(paste0("Row ", pos, " finished."))
}
test <- lapply(1:nrow(cond), do_test, cond = cond)
library(devtools)
load_all()
# MM <- "f1 =~ v1 + v2 + v3 + v4
#            f2 =~ v5 + v6 + v7 + v8"
#
# output_step1 <- step1(exampledata, measurementmodel = MM)
#
# step2output <- step2(output_step1)
#
# id = "id"
#
# A <- create_A(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
# Q <- create_Q(step2output, random_intercept = FALSE,
#               startvalues = matrix(.2, nrow = 2, ncol = 2))
#
# test <- step3(step2output, id = "id", A = A, Q = Q)
# summary(test$model)
#
cond <- expand.grid(MMdef = c("list", "nolist"),
step1def = c("group", "nogroup"),
randomintercept = c(TRUE, FALSE),
step3def = c("group", "nogroup"))
do_test <- function(pos, cond){
MMdef <- cond$MMdef[pos] |> as.character()
step1def <- cond$step1def[pos] |> as.character()
randomintercept <- cond$randomintercept[pos] |> as.logical()
step3def <- cond$step3def[pos] |> as.character()
if(MMdef == "list"){
MM <- list("f1 =~ v1 + v2 + v3 + v4",
"f2 =~ v5 + v6 + v7 + v8")
} else {
MM <- "f1 =~ v1 + v2 + v3 + v4
f2 =~ v5 + v6 + v7 + v8"
}
if(step1def == "nogroup"){
step1output <- step1(exampledata, MM)
} else {
step1output <- step1(exampledata, MM, group = "group",
invariances = c("loadings", "intercepts"))
}
step2output <- step2(step1output)
A <- create_A(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 2, ncol = 2))
Q <- create_Q(step2output, random_intercept = randomintercept,
startvalues = matrix(.2, nrow = 2, ncol = 2))
if(step3def == "group"){
step3output <- step3(step2output, id = "id", A = A, Q = Q, step3group = "group")
} else {
step3output <- step3(step2output, id = "id", A = A, Q = Q)
}
print(paste0("Row ", pos, " finished."))
}
test <- lapply(1:nrow(cond), do_test, cond = cond)
